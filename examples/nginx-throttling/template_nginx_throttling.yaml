apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: nginx-secureproxy
  labels:
    app: secureproxy
    name: secureproxy
  annotations:
    "openshift.io/display-name": secureproxy
    description: |
      An Nginx solution for an OpenShift route securization - Throttling, authentication features for openshift ingress route. This is a tech preview feature.
    iconClass: icon-cogs
    tags: "secureproxy, nginx"
parameters:
- description: The location of the Nginx image
  name: IMAGE_NGINX
  value: sdpsvalmbf.rete.testposte:5000/globals/nginx-116-rhel7
- description: The service name for upstream
  name: NOME_SERVICE
  required: true
- description: The request limit per second
  name: REQUESTxSEC_LIMIT
  required: true
- description: The Burst size
  name: BURST
  required: true


objects:
- apiVersion: v1
  data:
    nginx.conf: |
      
      limit_req_zone $server_name zone=limite:10m rate=${REQUESTxSEC_LIMIT}r/s;
      log_format  datadog  '$time_local "$request_method $uri" $status $body_bytes_sent $request_time';

      server {
        listen 8443 ssl;
        ssl_protocols TLSv1.2 TLSv1.1;
        ssl_prefer_server_ciphers on;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_certificate /etc/nginx/certs/certificato.crt;
        ssl_certificate_key /etc/nginx/certs/certificato.key;
       
        underscores_in_headers on;
      
        location / {
          proxy_pass_request_headers on;
          limit_req zone=limite burst=${BURST};
          limit_req_status 408;
          proxy_pass http://${NOME_SERVICE}.svc.cluster.local:80;
        }
      }
      
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: nginx.conf
    selfLink: /api/v1/namespaces/apigw-proxy-mutua/configmaps/nginx.conf
        
- apiVersion: v1
  data:
    certificato.crt: 
    certificato.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzBQK2g5WncvTXczaE8KMm1BMCtyaDg4SGkyU1FQOUgzVXVuTjExc3k1dEI3UHh5Y1J1d1Z3RklFTHp4WUlwV1FENGhObmtYYzNGQnNRdgp2cHNBVXRLcVorYkYzbmFwcHVXaWJJNVJZbStMazlhVDQxK0ZGdmY3aEVnWWNlSjU2QnB0R2o5aUJURElJajV1CnlVbDRrZkhjckhSa0hmOUJmQkR0OHhaYlpPYndBNUp6VXJNVUJObEVjc2R3VGwvNndWMDNVbmV6d3VtZmNxU2EKcjhMcU9FT1IxQmJkbU5ockFUTmMzTnJRa2ZFRElBbjRreWVRbUVYR2hwVUU4cEJWZWlRL1J6OWtuczg2YmVibgpKbmZCYkk1N1dKcUtYRHAyelQ4TFM5czVCWmR4SmQ0UzN6UzloTUtiV0FTWjAzZUR5VzBZMlF2Mi9ielRiOElvCmllREx5MjNWQWdNQkFBRUNnZ0VBQXgwSGV3TUl0dFM1ZzBNcVhqL21aK0lQYzdhWEp3d2dEZ29QbVRUYkhHOEIKb0srSGdSSTk4S2k1LzFQdUI2RE43M3o3OW9IWVNBcng0SkUrUkNjcUZGOXZFUVBpc05OOUsrME1HRVBIQVhZdwpRcVd1eExHODNzOU9IMzM0RjNyMjJlT1dMSzlDUkhLeStWN29zZmh6WVFocGlrRXFZNHN0RDY4Zk43enFjRUxZCkUvb2ZxbzFYM3kzNnpIelI1bnVXTUUwV1RKK1F1cks4RlpNN21vSlZMandlN1RUQzBaSWV5b0tPVkV6UmxKaU0KamYveWI2TmI3NEJCVkp4UUR4eVplOU1WMTZFY1FaK2lEWXF4V1MwQzAya2MzcmlNc2JvVGM4VHhxZ3djV04xZApQK1N3VjVFZDZRS1FSU3FoSlViWmkzSEZweUVxNHlCRDk5YSttSWtEa1FLQmdRRHN6RHNhZ1E5ejZ3YXJpeEdyCmIyaHQwNzIzZVVveDhVS2lCMWNvS1hFbHN1Z1ZpUlBJcTVramZieG9vNktGa0JFZjhsc3ZmU0hXVnpMWVhMOFYKMTM1dnVJbXp2STJmcm85dTBKMW1XZFFyTHdqZUxRSGpjTFA4L2t0T0ZTZ1B2TTRiaG8wS2lMeGVyMUpNb3drdgpnLzFoQWREKzl4UHZHY1U4ZmxPMnA1TXN6d0tCZ1FEQzNjWkRZN0VBMGpnWmh6N2hCdkRCUjdQUzFvdG9lQWg3CnVKYkJRYkpobGtLVllpakprUTlVZW1tSFBXa2RWYUV5dUU5ajBRVjFIc1p1cW9zU21CRkg0Ukl6VEFrUit5aTQKREdxUUU5Yk44ZDJ4akJJYXprcStkNmVUczB0WldYOFZmSUVtaDZ6cklVbEdDOWc3V3lsOHBUVUlSZFZ5UzM5TwpkZ2xKOXhRTUd3S0JnUUM3eEVwTmZ1OUE3S2x5VnlrZ3RvdXBJdEI1N3Z4dFU3Q1JpSjZNNHllc1RBd0tINU1ICmVVSktTVWFmOXJsRmpYSjIwWmVLdFgraVZheWtzZzUzaEZQbXhQNnovaHlTOVRrWkZ1VG9wdXc5ZmVOYlFYY1EKNFdwbmYwRTVYajlSRTFhZnJ2YWgxc0QvbDZmN3l2L2FwSi9EVDB4cEVJVEhBTGxNZWFOcDM4RXRNd0tCZ0ZaYwpuWUsrU3ZMM045K3dmZUNUQjk1UkhkUWlPM1NZUmdJM0E3RXdvWkw0V2hnRWdka2JUZlQ5cjRrOVlUbWIrcTRVCjJ6SjhyM09CcVNYZ3RYUVBLeEYxSVhEVWtPeUVLRDZ4V2dUeWxlOTk4dWUrRVVRS0N6d3dvWGNuTGd5eVNrMUcKZWFLTzNNYjBZSm9IbzlSaWlaZHhUSGlYSW9yZUJOVE1JVC9EbmdIakFvR0Fad1Y2KzhaWXpiK01UREt4TFAvOAoyOE5zbnI4aE5tY2VkdUowSDhHUzZJSHRMN1BFNnpYV09IdURtMzN4WTFQbTZxZGZjU1pLWFpyN1AyUldtZnFECnJQSVV3dHQ2QUFUZnM5VGY5Ymx1Vm9Bc3BxbGhsRGxOUG5lcHVPeTZlWXRvdFI1cTRINUg4RDZzWk80TUlDMzMKWWpZVTFTdEg4bmdvSEtTUm1kanR6aEU9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=
  kind: Secret
  metadata:
    creationTimestamp: null
    name: certificatissl
    selfLink: /api/v1/namespaces/apigw-proxy-mutua/secrets/certificatissl
  type: Opaque

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: reverseproxy
    name: reverseproxy
    selfLink: /apis/apps.openshift.io/v1/namespaces/apigw-proxy-mutua/deploymentconfigs/reverseproxy
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: reverseproxy
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reverseproxy
          deploymentconfig: reverseproxy
      spec:
        containers:
        - image: ${IMAGE_NGINX}
          imagePullPolicy: Always
          name: reverseproxy
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/app-root/etc/nginx.d/
            name: nginxconf
            readOnly: true
          - mountPath: /etc/nginx/certs
            name: certificatissl
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: nginx.conf
          name: nginxconf
        - name: certificatissl
          secret:
            defaultMode: 420
            secretName: certificatissl
    test: false
    triggers:
    - type: ConfigChange
